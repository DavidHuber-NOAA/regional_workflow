#!/bin/bash
#
#-----------------------------------------------------------------------
#
# This J-JOB script runs the radar reflectivity preprocess 
#      for the FV3-LAM model
#
#-----------------------------------------------------------------------
#
#-----------------------------------------------------------------------
#
# Source the variable definitions file and the bash utility functions.
#
#-----------------------------------------------------------------------
#
. ${GLOBAL_VAR_DEFNS_FP}
. $USHDIR/source_util_funcs.sh

#
#-----------------------------------------------------------------------
#
# Save current shell options (in a global array).  Then set new options
# for this script/function.
#
#-----------------------------------------------------------------------
#
{ save_shell_opts; set -u +x; } > /dev/null 2>&1
#
#-----------------------------------------------------------------------
#
# Get the full path to the file in which this script/function is located 
# (scrfunc_fp), the name of that file (scrfunc_fn), and the directory in
# which the file is located (scrfunc_dir).
#
#-----------------------------------------------------------------------
#

scrfunc_fp=$( readlink -f "${BASH_SOURCE[0]}" )
scrfunc_fn=$( basename "${scrfunc_fp}" )
scrfunc_dir=$( dirname "${scrfunc_fp}" )
#
#-----------------------------------------------------------------------
#
# Print message indicating entry into script.
#
#-----------------------------------------------------------------------
#
print_info_msg "
========================================================================
Entering script:  \"${scrfunc_fn}\"
In directory:     \"${scrfunc_dir}\"

This is the J-job script for the task that runs a radar reflectivity 
preprocess with FV3 for the specified cycle.
========================================================================"
#
#-----------------------------------------------------------------------
#
# Create the working directory under the cycle directory.
#
#-----------------------------------------------------------------------
#
if [ ${CYCLE_TYPE} == "spinup" ]; then
  workdir=${CYCLE_DIR}/process_smoke_spinup
else
  workdir=${CYCLE_DIR}/process_smoke
fi
rm -fr ${workdir}
mkdir_vrfy -p ${workdir}
#
#
#
gridspec_dir=${NWGES_BASEDIR}/grid_spec
#
#-----------------------------------------------------------------------
#
# Set the name of and create the directory in which the output from this
# script will be saved for long time (if that directory doesn't already exist).
# Usually ics_dir under tmpnwprd should be purged fairly soon after cycle done
#
#-----------------------------------------------------------------------
#
rave_nwges_dir=${NWGES_DIR}/RAVE_INTP
mkdir_vrfy -p "${rave_nwges_dir}"
#
#-----------------------------------------------------------------------
#
# Link the the hourly, interpolated RAVE data to $rave_nwges_dir so it
# is maintained there for future cycles.
#
#-----------------------------------------------------------------------
ECHO=/bin/echo
SED=/bin/sed
DATE=/bin/date
LN=/bin/ln

START_DATE=$(${ECHO} "${CDATE}" | ${SED} 's/\([[:digit:]]\{2\}\)$/ \1/')
YYYYMMDDHH=$(${DATE} +%Y%m%d%H -d "${START_DATE}")
YYYYMMDD=${YYYYMMDDHH:0:8}
HH=${YYYYMMDDHH:8:2}

${ECHO} ${YYYYMMDD}
${ECHO} ${HH}

current_day=`${DATE} -d "${YYYYMMDD}"`
current_hh=`${DATE} -d ${HH} +"%H"`
prev_hh=`${DATE} -d "$current_hh -24 hour" +"%H"`
previous_day=`${DATE} '+%C%y%m%d' -d "$current_day-1 days"`
previous_day="${previous_day} ${prev_hh}"
nfiles=24

for i in $(seq 0 $(($nfiles - 1)) )
do
   timestr=`date +%Y%m%d%H -d "$previous_day + $i hours"`
   intp_fname=${PREDEF_GRID_NAME}_intp_${timestr}00_${timestr}00.nc
   ${LN} -sf ${rave_nwges_dir}/${intp_fname} ${workdir}/${intp_fname}
done

if [ ${CYCLE_TYPE} == "spinup" ]; then
  output_filename=SMOKE_RRFS_data_${YYYYMMDDHH}00_spinup.nc
else
  output_filename=SMOKE_RRFS_data_${YYYYMMDDHH}00.nc
fi
#-----------------------------------------------------------------------
#
# Call the ex-script for this J-job and pass to it the necessary varia-
# bles.
#
#-----------------------------------------------------------------------
#
cd_vrfy ${workdir}
python -u ${SCRIPTSDIR}/preprocess_smoke.py \
  "${FIX_SMOKE_DUST}/${PREDEF_GRID_NAME}" \
  "${FIRE_RAVE_DIR}" \
  "${workdir}" \
  "${PREDEF_GRID_NAME}" \
print_err_msg_exit "\
Call to pyscript \"${scrfunc_fn}\" failed."

${ECHO} ${previous_day}
${ECHO} ${output_filename}

# Convert START_TIME from 'YYYYMMDDHH' or 'YYYYMMDD HH' format to Unix date format
# e.g. "Fri May  6 19:50:23 GMT 2005"
if [[ "${previous_day}" =~ ^[0-9]{8}\ {0,1}[0-9]{2}$ ]]; then
  previous_day=`${ECHO} "${previous_day}" | ${SED} 's/\([0-9]\{2\}\)$/ \1/'`
else
  ${ECHO} "ERROR: start time, '${previous_day}', is not in 'yyyymmdd hh' format"
  exit 1
fi
previous_day=`${DATE} -d "${previous_day}"`
${ECHO} ${previous_day}

files2cat=()
for i in $(seq 0 $(($nfiles - 1)) )
do
  timestr=`date +%Y%m%d%H -d "$previous_day + $i hours"`
  ${ECHO} ${timestr}
  file=${PREDEF_GRID_NAME}_intp_${timestr}00_${timestr}00.nc
  if [[ ! -s $file ]]; then
     file=dmy_${PREDEF_GRID_NAME}_intp_${timestr}00_${timestr}00.nc
     if [[ ! -s $file ]]; then
        echo "WARNING no interpolated or dummy RAVE data available for ${timestr}"
     else
        files2cat[$i]=${file}
     fi
  else
    files2cat[$i]=${file}
  fi
done
${ECHO} ${files2cat[*]}
ncrcat ${files2cat[*]} ${output_filename} 

cp ${output_filename} ${rave_nwges_dir}/
#
#-----------------------------------------------------------------------
#
# Print exit message.
#
#-----------------------------------------------------------------------
#
print_info_msg "
========================================================================
Exiting script:  \"${scrfunc_fn}\"
In directory:    \"${scrfunc_dir}\"
========================================================================"
#
#-----------------------------------------------------------------------
#
# Restore the shell options saved at the beginning of this script/func-
# tion.
#
#-----------------------------------------------------------------------
#
{ restore_shell_opts; } > /dev/null 2>&1

